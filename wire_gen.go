// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"doc-api/api"
	"doc-api/api/controller"
	"doc-api/api/db"
	"doc-api/api/entity"
	"doc-api/api/gateway"
	"doc-api/api/usecase"
	"doc-api/api/web"
	"doc-api/env"
)

// Injectors from wire.go:

func InitializeServer() api.Server {
	port := env.NewPort()
	jwt_SECRET_KEY := env.NewJwtSecretKey()
	jwtToken := entity.NewJwtToken(jwt_SECRET_KEY)
	db_HOST := env.NewDBHost()
	db_PORT := env.NewDBPort()
	db_NAME := env.NewDBName()
	db_USER := env.NewDBUser()
	db_PASS := env.NewDBPass()
	db_SCHEMA := env.NewDBSchema()
	gormDB := db.NewDBConnection(db_HOST, db_PORT, db_NAME, db_USER, db_PASS, db_SCHEMA)
	authRepository := gateway.NewAuthRepository(gormDB)
	authUser := usecase.NewAuthUserService(jwtToken, authRepository)
	authUserMiddleware := controller.NewAuthUserMiddleware(authUser)
	helloHandler := controller.NewHelloHandler()
	hash_SALT := env.NewHashSalt()
	hash_STRETCH := env.NewHashStretch()
	hashing := entity.NewHashing(hash_SALT, hash_STRETCH)
	loginRepository := gateway.NewLoginRepository(gormDB)
	loginService := usecase.NewLoginService(hashing, jwtToken, loginRepository)
	loginHandler := controller.NewLoginHandler(loginService)
	docRepository := gateway.NewDocRepository(gormDB)
	docService := usecase.NewDocService(docRepository)
	docHandler := controller.NewDocHandler(docService)
	userRepository := gateway.NewUserRepository(gormDB)
	userService := usecase.NewUserService(userRepository, hashing)
	userHandler := controller.NewUserHandler(userService)
	router := web.NewRouter(jwt_SECRET_KEY, authUserMiddleware, helloHandler, loginHandler, docHandler, userHandler)
	loggerFactory := web.NewCustomLogger()
	server := api.NewServer(port, router, loggerFactory)
	return server
}
